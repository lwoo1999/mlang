


// if we have termination checking, nat defined without "inductively" will fails to check, but now we don't
// so just pren10d we have...
define inductively nat: type = sum {
  case zero
  case suc(: nat)
}

// TODO clean up when we have `with_constructor` and number literal
define zero = nat.zero
define suc(a: nat): nat = nat.suc(a)

// alternative definitions, which we don't use
define plus_alt_1:
 (a       b: nat) ⇒ nat =
  ─     ┌ zero    → a
        └ suc(m)  → suc(plus_alt_1(a, m))

define plus_alt_2:
 (a       b: nat) ⇒ nat =
  ─     ┌ zero    → a
        └ suc(m)  → plus_alt_2(suc(a), m)



// this definition allows more definitional equality, but the definition body needs to be confluent, we haven't implemented the check yet.
define plus(a b: nat): nat = run {
  define rec:
    pair(nat, nat) ⇒ nat =
  ┌ (zero, a) → a
  ├ (a, zero) → a
  └ (x, suc(y)) → suc(rec(make(x, y)))
  rec(make(a, b))
}


define n0 = nat.zero
define n1 = suc(n0)
define n2 = suc(n1)
define n3 = suc(n2)
define n4 = suc(n3)
define n5 = suc(n4)
define n6 = suc(n5)
define n7 = suc(n6)
define n8 = suc(n7)
define n9 = suc(n8)
define n10 = suc(n9)

// currently we use `_test_xxx` to write test codes
define _test_plus = run {
  define left_zero(a: nat): plus(a, zero) ≡ a = refl
  define right_zero(a: nat): plus(zero, a) ≡ a = refl
  define ttt1(a: nat): nat = plus(n2, n4)
  define ttt2(a: nat): nat = plus(n4, n2)
  define assert_tt2_eq_holder(b: (nat ⇒ nat) ⇒ type, c: (i: nat ⇒ nat) ⇒ b(i)): b(ttt1) = c(ttt2)
  define assert_nat_eq_holder2(x y: nat, b: (nat ⇒ nat) ⇒ type, c: (i: nat ⇒ nat) ⇒ b(i)): b(─ → plus(x, y)) = c(─ → plus(x, y))
  define ttt3(a: nat): nat = plus_alt_2(n4, n2)
  define assert_tt2_eq_holder3(b: (nat ⇒ nat) ⇒ type, c: (i: nat ⇒ nat) ⇒ b(i)): b(ttt1) = c(ttt3)
  define ttt(a b: nat, c: nat ⇒ type, d: type ⇒ type): type = d(c(plus(a, b)))
  unit.make
}




/*

define plus_pointwise_lemma:
 (a   m: nat) ⇒ plus2(suc(a), m) ≡ suc(plus2(a, m)) =
  ─ ┌ zero    → ─ → suc(a)
    └ suc(n)  → i → plus_pointwise_lemma(suc(a), n, i)

define plus_pointwise:
 (a       b: nat) ⇒ plus(a, b) ≡ plus2(a, b) =
  ─     ┌ zero    → ─ → b
        └ suc(m)  → plus_pointwise() // suc(plus(a, m)) ≡ plus2(suc(a), m)

define path_plus12: plus ≡ plus2 = fun_ext(nat, ─ → nat, plus, plus2,

*/

define multi:
 (a       b: nat) ⇒ nat =
  ─     ┌ zero    → nat.zero
        └ suc(m)  → plus(a, multi(a, m))

define _test_multi = run {
  define n6teen1 = plus(n8, n8)
  define n6teen2 = multi(n4, n4)
  define n6teen_eq: n6teen1 ≡ n6teen2 = refl
  unit.make
}

define test_hcomp_nat: x_refl_type(hcomp(zero)) = x_refl(zero)

define fib:
(: nat) ⇒ nat =
┌ zero → nat.zero
├ suc(zero) → n1
└ suc(suc(b)) → plus(fib(nat.suc(b)), fib(b))

define _test_fib = run {
  define n34 = plus(n10, plus(n10, plus(n10, n4)))
  define fib_n10_eq: n34 ≡ fib(n9) = refl
  unit.make
}



// TODO wish we have `projection` syntax
// then we can do
// projection (n: nat) is_even: bool
declare nat_is_even: nat ⇒ bool

define nat_is_odd:
  nat ⇒ bool =
┌ zero → bool.false
└ suc(m) → nat_is_even(m)

define nat_is_even =
┌ zero → bool.true
└ suc(m) → nat_is_odd(m)

