
//
// a0 -u*  a1
// |       |
// r0      r1
// *       *
// b0 -v* b1
define square(
  #A: type,
  #a0 #a1 #b0 #b1: A,
  u: a0 ≡ a1, v: b0 ≡ b1, r0: a0 ≡ b0, r1: a1 ≡ b1
): type =
  r0 ≡[i → u(i) ≡ v(i)] r1

define square_constant(#A: type, #a: A, p: a ≡ a): square(p, p, p, p) =
  i → j → hcom(0, 1, connection_or(p, i, j) |i=0: x_refl(p(j))
                                            |j=0: x_refl(p(i))
                                            |i=1: connection_and(p, j)
                                            |j=1: connection_and(p, i))

// TODO alternative definition when we have the feature bellow
// [issue 7] const_projections syntax accepts a reference, then you can use them as `square.constant(p)`
// const_projections square {
//   define constant(#A: type, #a: A, p: a ≡ a): square(p, p, p, p) =
// }