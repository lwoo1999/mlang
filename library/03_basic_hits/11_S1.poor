

/*

// TODO implement type annotation (only allowing equality types)
define S1: type = sum {
  case base
  case loop: base ≡ base
}

// TODO implement boundary like redtt
define S2: type = sum {
  case base
  case surf(i j: I | ∂(i, j): base)
}
*/


define S1: type = sum {
  case base
  case loop(i: I | ~i: base | i: base)
}


define test_transp_base: x_refl_type(transp(i → S1, 0, S1.base)) = x_refl(S1.base)

// S1_join_S1 related

define S1_moebius
: S1      ⇒ type =
┌ base    → bool
└ loop(i) → bool_path_to_neg_bool(i)


define S1_helix:
S1        ⇒ type =
┌ base    → int
└ loop(i) → int_suc_path(i)

define S1_loop_space = S1.base ≡ S1.base
define S1_loop(i: I) = S1.loop(i)
define S1_loop_inv(i: I) = S1.loop(~i)

define winding(p: S1_loop_space): int = transp(i → S1_helix(p(i)), 0, int_zero)

define S1_loop2: S1_loop_space = path_compose(S1_loop, S1_loop)

define test_loop1: x_refl_type(int_one) = x_refl(winding(S1_loop))

define test_loop2: x_refl_type(int_two) = x_refl(winding(S1_loop2))

define test_loop3: x_refl_type(int_three) = x_refl(winding(path_compose(S1_loop, S1_loop2)))

define test_loopn1: x_refl_type(int_n_one) = x_refl(winding(S1_loop_inv))

define test_loop_zero: x_refl_type(int_zero) = x_refl(winding(path_compose(S1_loop, S1_loop_inv)))

define S1_pointed: pointed = make(S1.base)


define rot_loop:
 (a: S1) ⇒ a ≡ a =
┌ base    → j → S1.loop(j)
└ loop(i) → j → hcomp(S1.base |~i: k → S1.loop(j∨(~k)) |i: k → S1.loop(j∧k) |~j: k → S1.loop(i∨(~k)) |j: k → S1.loop(i∧k) )


define rot_loop_inv(a: S1): (refl ≡[i → (rot_loop(rot_loop(a, ~i), i) ≡ a)] refl) =
  i → j → hcomp(rot_loop(rot_loop(a, (~i)∨j), i)
          |~i: k → a
          |i: k → rot_loop(a, j∧(~k))
          |~j: k → rot_loop(rot_loop(a, ~i), i)
          |j: k → rot_loop(a, i∧(~k))
          )


define rot: S1 ⇒ S1 ⇒ S1 =
┌ base → x → x
└ loop(i) → x → rot_loop(x, i)


define is_prop_fam_S1(P: S1 ⇒ type, pP: (x: S1) ⇒ is_prop(P(x)), b0: P(S1.base)): b0 ≡[i → P(S1.loop(i))] b0 =
  i → pP(S1.loop(i), transp(j → P(S1.loop(i∧j)), ~i, b0), transp(j → P(S1.loop(i∨(~j))), i, b0), i)

define rot_is_equiv:
 (a: S1) ⇒ is_equiv(rot(a)) =
┌ base → id_is_equiv(S1)
└ loop(i) → is_prop_fam_S1(x → is_equiv(rot(x)), x → is_prop_is_equiv(rot(x)), id_is_equiv(_))(i)






















