

/*

// TODO implement type annotation (only allowing equality types)
define inductively S1: type = sum {
  case base
  case loop: base ≡ base
}

// TODO implement boundary like redtt
define inductively S2: type = sum {
  case base
  case surf(i j: I | ∂(i, j): base)
}
*/


define inductively S1: type = sum {
  case base
  case loop(i: I | ~i: base | i: base)
}

define inductively S2: type = sum {
  case base
  case surf(i j: I |~i: base |i: base |~j: base |j: base)
}

define S1_pointed: pointed = make(S1.base)

