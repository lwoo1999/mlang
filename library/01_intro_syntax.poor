/**

"─"
  - used alone as introduces names as in argument list
  - used after as pattern, means introduce without name
"┬" empty pattern
"⊏" single pattern
"┌", "└", "├" is patterns with 2+ cases

"│" is just whitespace
**/

// ignored is a keyword to don't put the definition in the context at all, it just makes it type check

define ignored _ = { // "{" starts a let expression

  define nat: type = sum [
    case zero
    case suc(nat)
  ]

  define fin3 = sum [
    case one two three
  ]

  define fin3_pair = record {
    field a b: fin3
  }

  define inverse:
    fin3  ⇒ fin3 =
  ┌ one   → fin3.three
  ├ two   → fin3.two
  └ three → fin3.one

  define test:
   (intros a       b: fin3) ⇒ fin3 =
    ─    ┌ one   ┌ one      → fin3.three
         │       ├ two      → fin3.two
         │       └ three    → test(fin3.one, fin3.one, fin3.one) // recursive definitions
         ├ three   ─        → b
         └ ─       ─        → b // although first is a dash pattern, it doesn't introduce the name (yet)

  test
}
