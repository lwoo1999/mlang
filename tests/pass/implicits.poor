

define refl(#A: type, #x: A): x ≡ x = i → x

define fun_ext(#A: type, #B: A ⇒ type, #f #g: (x: A) ⇒ B(x), p: (x: A) ⇒ f(x) ≡ g(x)): f ≡ g =
  i → x → p(x, i)

define fun_ext2(A: type, B: A ⇒ type, f g: (x: A) ⇒ B(x), p: (x: A) ⇒ f(x) ≡ g(x)): f ≡ g =
  fun_ext(@_, @_, @_, @_, p)

define fun_ext3(A: type, B: A ⇒ type, f g: (x: A) ⇒ B(x), p: (x: A) ⇒ f(x) ≡ g(x)): f ≡ g =
  fun_ext(p)






define inductively nat: type = sum {
  case zero
  case suc(: nat)
}

define zero = nat.zero


define record_of_refl = record {
  field #A: type
  field #x #y: A
  field eq: x ≡ y
}


define test_record_of_refl: zero ≡ zero = record_of_refl.make(refl(@_, @zero)).eq

define record_of_refl2(#A: type): type = record {
  field #x #y: A
  field eq: x ≡ y
}


define test_record_of_refl2: zero ≡ zero = record_of_refl2.make(refl(@_, @zero)).eq


define test_record_of_metas = record {
  field test: (#a: nat, b: a ≡ a) ⇒ type
  field a c: test(refl(@_, @zero))
  field b: test(refl(@_, @zero))
}

